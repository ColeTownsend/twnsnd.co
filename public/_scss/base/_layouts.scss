// Layouts
// ---------------------------------------


// basically functions as a block wrapper. maybe for a page section, who knows?
section {
  padding: 2rem auto;
  display: block;
  @include clearfix();
  position: relative;
}

[am-position~="absolute"] {
  position: absolute;
}
[am-position~="left"] {
  left: 0;
}
[am-position~="right"] {
  right: 0;
}
[am-position~="top"] {
  top: 0;
}
[am-position~="bottom"] {
  bottom: 0;
}



// flexgrid
[am-Grid-Row~="top"] { align-items: flex-start; }
[am-Grid-Row~="bottom"] { align-items: flex-end; }
[am-Grid-Row~="middle"] { align-items: center; }

/* Alignment per column */
[am-Grid-Col~="top"] { align-self: flex-start; }
[am-Grid-Col~="bottom"] { align-self: flex-end; }
[am-Grid-Col~="middle"] { align-self: center; }

[am-Grid-Row] {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin: 0 var(--gutter-compensation);
}

/* Reverse order */
[am-Grid-Row~="reverse"] {
  flex-direction: row-reverse;
  flex-wrap: row-reverse;
}

[am-Grid-Row~="gutters"] [am-Grid-Col] {
  padding-left: calc(var(--gutter) / 2);
  padding-right: calc(var(--gutter) / 2);
}

/* Distribution */
[am-Grid-Row~="around"] { justify-content: space-around; }
[am-Grid-Row~="between"] { justify-content: space-between; }

/* Alignment per row */
/* Horizontal */
[am-Grid-Row~="start"] {
  justify-content: flex-start;
  text-align: start;
}

[am-Grid-Row~="end"] {
  justify-content: flex-end;
  text-align: end;
}

[am-Grid-Row~="center"] {
  justify-content: center;
  text-align: center;
}

/* Vertical */
[am-Grid-Row~="top"] { align-items: flex-start; }
[am-Grid-Row~="bottom"] { align-items: flex-end; }
[am-Grid-Row~="middle"] { align-items: center; }

/* Alignment per column */
[am-Grid-Col~="top"] { align-self: flex-start; }
[am-Grid-Col~="bottom"] { align-self: flex-end; }
[am-Grid-Col~="middle"] { align-self: center; }


/* Mobile first columns */
[am-Grid-Col] {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  flex-basis: 0%;
  flex-shrink: 0;
}

[am-Grid-Col~="12"] {
  flex: 0 0 100%;
  max-width: 100%;
}

[am-Grid-Col~="11"] {
  flex: 0 0 91.6666%;
  max-width: 91.6666%;
}

[am-Grid-Col~="10"] {
  flex: 0 0 83.3333%;
  max-width: 83.3333%;
}

[am-Grid-Col~="9"] {
  flex: 0 0 75%;
  max-width: 75%;
}

[am-Grid-Col~="8"] {
  flex: 0 0 66.6666%;
  max-width: 66.6666%;
}

[am-Grid-Col~="7"] {
  flex: 0 0 58.3333%;
  max-width: 58.3333%;
}

[am-Grid-Col~="6"] {
  flex: 0 0 50%;
  max-width: 50%;
}

[am-Grid-Col~="5"] {
  flex: 0 0 41.6666%;
  max-width: 41.6666%;
}

[am-Grid-Col~="4"] {
  flex: 0 0 33.3333%;
  max-width: 33.3333%;
}

[am-Grid-Col~="3"] {
  flex: 0 0 25%;
  max-width: 25%;
}

[am-Grid-Col~="2"] {
  flex: 0 0 16.6666%;
  max-width: 16.6666%;
}

[am-Grid-Col~="1"] {
  flex: 0 0 8.3333%;
  max-width: 8.3333%;
}


// Neat Grid

// grid container
[am-Grid-Row], article {
  @extend %container;
  @include breakpoint(break-3) {
    @include maxwidth(3);
  }

  @include breakpoint(break-4) {
    @include maxwidth(4);
  }
}



// Container.
.section {
  margin: 0 auto;
  position: relative;
  width: 94%;
  @include clearfix;

  @include breakpoint(break-3) {
    @include maxwidth(3);
  }

  @include breakpoint(break-4) {
    @include maxwidth(4);
  }
}

// Single column.
.single {
  margin: 0 auto;
  @include measure(all);
}

// Base column styles.
.column {
  margin: 0 auto;
  width: 100%;
  @include measure(0);

  @include breakpoint(break-1) {
    float: left;
    margin: inherit;
    max-width: auto;
    padding-left: map-get($gutterwidths, small);
    padding-right: map-get($gutterwidths, small);
  }

  @include breakpoint(break-3) {
    padding-left: map-get($gutterwidths, medium);
    padding-right: map-get($gutterwidths, medium);
  }
}

// Two columns.
.column--duo {
  @include breakpoint(break-1) {
    width: 50%;
  }
}

// Three columns.
.column--trio {
  @include breakpoint(break-1) {
    width: 33.333%;
  }
}

// Four columns. Two at smaller breakpoints.
.column--quad {
  @include breakpoint(break-1) {
    width: 50%;
  }

  @include breakpoint(break-2) {
    width: 25%;
  }
}

// Two column layout with a main text column and a sidebar.

// Main column.
.column--main {
  @include breakpoint(break-1) {
    @include ideal-measure(1, small);
  }

  @include breakpoint(break-2) {
    @include ideal-measure(2, small);
  }

  @include breakpoint(break-3) {
    @include ideal-measure(3, medium);
  }

  @include breakpoint(break-4) {
    @include ideal-measure(4, medium);
  }
}

// Sidebar.
.column--sidebar {
  @include breakpoint(break-1) {
    padding-right: map-get($gutterwidths, medium);
    @include ideal-measure(1, small, false);
  }

  @include breakpoint(break-2) {
    @include ideal-measure(2, small, false);
  }

  @include breakpoint(break-3) {
    padding-right: map-get($gutterwidths, large);
    @include ideal-measure(3, medium, false);
  }

  @include breakpoint(break-4) {
    @include ideal-measure(4, medium, false);
  }
}

// If sidebar on the right side.
.column--main + .column--sidebar {
  @include breakpoint(break-1) {
    padding-left: map-get($gutterwidths, medium);
    padding-right: map-get($gutterwidths, small);
  }

  @include breakpoint(break-3) {
    padding-left: map-get($gutterwidths, large);
    padding-right: map-get($gutterwidths, medium);
  }
}

// Set the main text one level down in the modular scale for narrower columns.
.column--trio,
.column--quad,
.column--sidebar {
  @include breakpoint(break-3) {
    p, li {
      @include sassline($fontsize: eta, $font: $bodytype, $lineheight: 2, $below: 2, $breakpoint: 3);
    }
  }

  @include breakpoint(break-4) {
    p, li {
      @include sassline($fontsize: eta, $font: $bodytype, $lineheight: 2, $below: 2, $breakpoint: 4);
    }
  }
}

// Main column on the right with inline sidenotes.
// The sidenotes will move out the column into the sidebar position aligned to the baseline.
.column--right {
  @include breakpoint(break-1) {
    @include ideal-measure(1, small);
    @include ideal-measure(1, small, false, margin-left);
  }

  @include breakpoint(break-2) {
    @include ideal-measure(2, small);
    @include ideal-measure(2, small, false, margin-left);
  }

  @include breakpoint(break-3) {
    @include ideal-measure(3, medium);
    @include ideal-measure(3, medium, false, margin-left);
  }

  @include breakpoint(break-4) {
    @include ideal-measure(4, medium);
    @include ideal-measure(4, medium, false, margin-left);
  }

  .sidenote {
    @include breakpoint(break-1) {
      left: 0;
      padding-left: map-get($gutterwidths, small);
      padding-right: map-get($gutterwidths, medium);
      position: absolute;
      @include ideal-measure(1, small, false);
    }

    @include breakpoint(break-2) {
      @include ideal-measure(2, small, false);
    }

    @include breakpoint(break-3) {
      padding-right: map-get($gutterwidths, large);
      @include ideal-measure(3, medium, false);
    }

    @include breakpoint(break-4) {
      padding-left: map-get($gutterwidths, medium);
      @include ideal-measure(4, medium, false);
    }
  }
}

// Main column on the left with inline sidenotes.
.column--left {
  @include breakpoint(break-1) {
    @include ideal-measure(1, small);
  }

  @include breakpoint(break-2) {
    @include ideal-measure(2, small);
  }

  @include breakpoint(break-3) {
    @include ideal-measure(3, medium);
  }

  @include breakpoint(break-4) {
    @include ideal-measure(4, medium);
  }

  .sidenote {
    @include breakpoint(break-1) {
      padding-left: map-get($gutterwidths, medium);
      padding-right: map-get($gutterwidths, small);
      position: absolute;
      @include ideal-measure(1, small, false);
      @include ideal-measure(1, small, true, left);
    }

    @include breakpoint(break-2) {
      @include ideal-measure(2, small, false);
      @include ideal-measure(2, small, true, left);
    }

    @include breakpoint(break-3) {
      padding-left: map-get($gutterwidths, large);
      @include ideal-measure(3, medium, false);
      @include ideal-measure(3, medium, true, left);
    }

    @include breakpoint(break-4) {
      padding-right: map-get($gutterwidths, medium);
      @include ideal-measure(4, medium, false);
      @include ideal-measure(4, medium, true, left);
    }
  }
}